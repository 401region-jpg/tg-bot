# bot.py
import asyncio
import logging
import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import TELEGRAM_TOKEN, PORT, ADMIN_ID
from db import Database  # ‚Üê –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—à—å Database
from handlers import register_handlers

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not ADMIN_ID:
    logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")
logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)
db = Database()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ñ–∞–π–ª bot.db)

async def start_webserver():
    async def handler(request):
        return web.Response(text="OK")
    app = web.Application()
    app.router.add_get("/", handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"Keepalive server started on port {PORT}")

async def periodic_tasks():
    # –±—ç–∫–∞–ø, –æ—á–∏—Å—Ç–∫–∞, –º–µ—Ç—Ä–∏–∫–∏
    while True:
        try:
            await db.backup_snapshot()
            logger.info("‚úÖ –ë—ç–∫–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞")

        try:
            cutoff = datetime.datetime.utcnow() - datetime.timedelta(days=30)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ db.py –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            await db.cleanup_old_users(cutoff)
            logger.info("üßπ –°—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")

        await asyncio.sleep(60 * 60)  # —Ä–∞–∑ –≤ —á–∞—Å

async def main():
    await db.init()
    await register_handlers(dp, db, bot)  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω bot
    asyncio.create_task(start_webserver())
    asyncio.create_task(periodic_tasks())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
