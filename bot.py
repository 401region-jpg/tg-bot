import logging
import sqlite3
import asyncio
import random
import shutil
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

# -----------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------------
TOKEN = "7517420285:AAEJMY567Htns_i3SbMqww5U0O_-TTjbPW8"
ADMIN_USERNAME = "@lxsonen"
ADMIN_ID = None  # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–∑–∂–µ –ø–æ username
DB_FILE = "database.db"
BACKUP_FILE = "database_backup.db"
MIN_AGE, MAX_AGE = 16, 30
SUPERLIKE_COOLDOWN = 24 * 3600  # 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# -----------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------------------
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# -----------------------------------
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    name TEXT,
    age INTEGER,
    description TEXT,
    photo TEXT,
    last_active TIMESTAMP,
    superlike_used TIMESTAMP,
    ref_bonus INTEGER DEFAULT 0
)""")

cursor.execute("""CREATE TABLE IF NOT EXISTS likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_id INTEGER,
    to_id INTEGER,
    type TEXT
)""")

conn.commit()

# -----------------------------------
# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# -----------------------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# -----------------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# -----------------------------------
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
main_kb.add("üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", "üíå –ú–æ–∏ –º—ç—Ç—á–∏")
main_kb.add("‚≠ê –ú–æ–π —Å—É–ø–µ—Ä–ª–∞–π–∫", "üë• –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥—É")

# -----------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------
def backup_db():
    try:
        shutil.copy(DB_FILE, BACKUP_FILE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone()

def update_activity(user_id):
    cursor.execute("UPDATE users SET last_active=? WHERE user_id=?", (datetime.datetime.now(), user_id))
    conn.commit()

async def log_errors():
    while True:
        await asyncio.sleep(86400)  # —Ä–∞–∑ –≤ –¥–µ–Ω—å
        try:
            await bot.send_message(ADMIN_ID, "‚ÑπÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")

def cleanup_inactive():
    cutoff = datetime.datetime.now() - datetime.timedelta(days=30)
    cursor.execute("DELETE FROM users WHERE last_active < ?", (cutoff,))
    conn.commit()

# -----------------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------------------
@dp.message_handler(commands=["start"])
async def start_cmd(msg: types.Message):
    global ADMIN_ID
    if msg.from_user.username == ADMIN_USERNAME.lstrip("@"):
        ADMIN_ID = msg.from_user.id

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, last_active) VALUES (?, ?, ?)",
                   (msg.from_user.id, msg.from_user.username, datetime.datetime.now()))
    conn.commit()
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É:", reply_markup=main_kb)

@dp.message_handler(Text(equals="üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"))
async def fill_profile(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    dp.register_message_handler(process_name, state="fill_name")

async def process_name(msg: types.Message):
    name = msg.text
    cursor.execute("UPDATE users SET name=? WHERE user_id=?", (name, msg.from_user.id))
    conn.commit()
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    dp.register_message_handler(process_age, state="fill_age")

async def process_age(msg: types.Message):
    try:
        age = int(msg.text)
    except:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    if age < MIN_AGE:
        age = MIN_AGE
    elif age > MAX_AGE:
        age = MAX_AGE
    cursor.execute("UPDATE users SET age=? WHERE user_id=?", (age, msg.from_user.id))
    conn.commit()
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 1240 —Å–∏–º–≤–æ–ª–æ–≤):")
    dp.register_message_handler(process_desc, state="fill_desc")

async def process_desc(msg: types.Message):
    text = msg.text[:1240]
    cursor.execute("UPDATE users SET description=? WHERE user_id=?", (text, msg.from_user.id))
    conn.commit()
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
    dp.register_message_handler(process_photo, content_types=["photo"], state="fill_photo")

async def process_photo(msg: types.Message):
    file_id = msg.photo[-1].file_id
    cursor.execute("UPDATE users SET photo=? WHERE user_id=?", (file_id, msg.from_user.id))
    conn.commit()
    await msg.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_kb)

@dp.message_handler(Text(equals="üîç –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"))
async def view_profiles(msg: types.Message):
    user = get_user(msg.from_user.id)
    if not user or not user[2] or not user[3]:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É.")
        return
    cursor.execute("SELECT * FROM users WHERE user_id != ?", (msg.from_user.id,))
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç.")
        return
    row = random.choice(rows)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f"like_{row[0]}"))
    kb.add(InlineKeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{row[0]}"))
    kb.add(InlineKeyboardButton("‚≠ê –°—É–ø–µ—Ä–ª–∞–π–∫", callback_data=f"superlike_{row[0]}"))
    await bot.send_photo(msg.chat.id, row[5], caption=f"{row[2]}, {row[3]}\n\n{row[4]}", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("like_") or c.data.startswith("superlike_") or c.data.startswith("skip_"))
async def process_like(call: types.CallbackQuery):
    user_id = call.from_user.id
    action, target = call.data.split("_")
    target_id = int(target)
    if action == "skip":
        await call.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ üëé")
    elif action == "like":
        cursor.execute("INSERT INTO likes (from_id, to_id, type) VALUES (?, ?, ?)", (user_id, target_id, "like"))
        conn.commit()
        await call.answer("–õ–∞–π–∫ üëç")
    elif action == "superlike":
        now = datetime.datetime.now()
        cursor.execute("SELECT superlike_used, ref_bonus FROM users WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        last_used, bonus = row
        if bonus > 0:
            cursor.execute("UPDATE users SET ref_bonus=ref_bonus-1 WHERE user_id=?", (user_id,))
            conn.commit()
            allowed = True
        elif not last_used or (now - datetime.datetime.fromisoformat(last_used)).total_seconds() > SUPERLIKE_COOLDOWN:
            cursor.execute("UPDATE users SET superlike_used=? WHERE user_id=?", (now, user_id))
            conn.commit()
            allowed = True
        else:
            allowed = False
        if allowed:
            cursor.execute("INSERT INTO likes (from_id, to_id, type) VALUES (?, ?, ?)", (user_id, target_id, "superlike"))
            conn.commit()
            await bot.send_message(target_id, f"üåü –í–∞—Å –≤—ã–±—Ä–∞–ª–∏! {call.from_user.first_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—É–ø–µ—Ä–ª–∞–π–∫!")
            await call.answer("–°—É–ø–µ—Ä–ª–∞–π–∫ üåü")
        else:
            await call.answer("–°—É–ø–µ—Ä–ª–∞–π–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ‚ùó")

@dp.message_handler(Text(equals="üíå –ú–æ–∏ –º—ç—Ç—á–∏"))
async def my_matches(msg: types.Message):
    cursor.execute("SELECT to_id FROM likes WHERE from_id=? AND type IN ('like','superlike')", (msg.from_user.id,))
    liked = [x[0] for x in cursor.fetchall()]
    cursor.execute("SELECT from_id FROM likes WHERE to_id=? AND type IN ('like','superlike')", (msg.from_user.id,))
    liked_back = [x[0] for x in cursor.fetchall()]
    matches = set(liked) & set(liked_back)
    if not matches:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π üòî")
    else:
        for m in matches:
            user = get_user(m)
            if user:
                await msg.answer(f"üî• –£ –≤–∞—Å –º—ç—Ç—á —Å {user[2]}, {user[3]}!")

@dp.message_handler(Text(equals="üë• –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥—É"))
async def invite(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞: https://t.me/rsuhinlove_bot")

@dp.message_handler(commands=["admin"])
async def admin_cmd(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    text = msg.text.split(" ", 2)
    if len(text) >= 3 and text[1] == "message":
        message = text[2]
        cursor.execute("SELECT user_id FROM users")
        for row in cursor.fetchall():
            try:
                await bot.send_message(row[0], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: {message}")
            except:
                pass
        await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
    else:
        cursor.execute("SELECT COUNT(*) FROM users")
        users = cursor.fetchone()[0]
        await msg.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")

# -----------------------------------
# –ó–∞–ø—É—Å–∫
# -----------------------------------
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(log_errors())
    cleanup_inactive()
    backup_db()
    executor.start_polling(dp, skip_updates=True)
